<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Teachers - Admin</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f5f5;
            min-height: 100vh;
        }
        
        .header {
            background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
            color: white;
            padding: 20px 0;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .nav-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .nav-left h1 {
            font-size: 24px;
        }
        
        .nav-right a {
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            border: 1px solid rgba(255,255,255,0.3);
            border-radius: 5px;
            transition: all 0.3s;
            margin-left: 10px;
        }
        
        .nav-right a:hover {
            background: rgba(255,255,255,0.2);
        }
        
        .container {
            max-width: 1200px;
            margin: 30px auto;
            padding: 0 20px;
        }
        
        .form-card {
            background: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
        }
        
        input {
            width: 100%;
            max-width: 300px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            background: #28a745;
            color: white;
            font-weight: 600;
        }
        
        .btn:hover {
            background: #218838;
        }
        
        .teachers-table {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }
        
        th {
            background: #dc3545;
            color: white;
        }
        
        tr:hover {
            background: #f8f9fa;
        }
        
        .info-card {
            background: #e8f4fd;
            border-left: 4px solid #007bff;
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="nav-container">
            <div class="nav-left">
                <h1>üë®‚Äçüè´ Manage Teachers</h1>
            </div>
            <div class="nav-right">
                <a href="/admin/dashboard">‚Üê Dashboard</a>
                <a href="/logout">Logout</a>
            </div>
        </div>
    </div>
    
    <div class="container">
        <div class="info-card">
            <strong>Note:</strong> Teachers will automatically get login accounts with their Register ID as both username and password.
        </div>
        
        <div class="form-card">
            <h3>Add New Teacher</h3>
            <form method="POST" action="/admin/teachers/create">
                <div class="form-group">
                    <label for="name">Full Name:</label>
                    <input type="text" name="name" required placeholder="e.g., Dr. John Smith">
                </div>
                
                <div class="form-group">
                    <label for="register_id">Register ID:</label>
                    <input type="text" name="register_id" required placeholder="e.g., TCH001">
                    <small>This will be used as username and default password</small>
                </div>
                
                <button type="submit" class="btn">Add Teacher</button>
            </form>
        </div>
        
        <div class="teachers-table">
            <table>
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Username</th>
                        <th>Register ID</th>
                        <th>Status</th>
                        <th>Created</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% teachers.forEach(teacher => { %>
                        <tr>
                            <td><%= teacher.name %></td>
                            <td><%= teacher.username %></td>
                            <td><%= teacher.register_id || 'N/A' %></td>
                            <td><span style="color: #28a745;">Active</span></td>
                            <td><%= new Date(teacher.created_at).toLocaleDateString() %></td>
                            <td>
                                <button class="btn btn-danger" onclick="deleteTeacher(<%= teacher.id %>, '<%= teacher.name %>')" style="background: #dc3545; padding: 6px 12px; font-size: 12px;">
                                    üóëÔ∏è Delete
                                </button>
                            </td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
    </div>
    
    <script>
        // Safe fetch helper that ensures JSON and sends session cookies
        async function fetchJson(url, options = {}) {
            const response = await fetch(url, { credentials: 'same-origin', ...options });
            if (response.status === 401) {
                alert('Your session has expired. Redirecting to login...');
                window.location.href = '/login';
                throw new Error('Unauthorized');
            }
            const contentType = response.headers.get('content-type') || '';
            if (!contentType.includes('application/json')) {
                const text = await response.text();
                throw new Error(`Non-JSON response (${response.status}). Possibly redirected to login. First bytes: ${text.slice(0, 80)}`);
            }
            return response.json();
        }

        async function deleteTeacher(teacherId, teacherName) {
            if (confirm(`Are you sure you want to delete the teacher "${teacherName}"?\n\nThis will also unassign them from all classes and cannot be undone.`)) {
                try {
                    // Try DELETE first; if it fails due to method restrictions, fallback to POST
                    let data;
                    try {
                        data = await fetchJson(`/admin/teachers/delete/${teacherId}`, {
                            method: 'DELETE',
                            headers: { 'Content-Type': 'application/json' }
                        });
                    } catch (err) {
                        // Fallback to POST endpoint
                        data = await fetchJson(`/admin/teachers/delete/${teacherId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' }
                        });
                    }
                    
                    if (data.success) {
                        alert('Teacher deleted successfully!');
                        location.reload();
                    } else {
                        alert('Error deleting teacher: ' + data.message);
                    }
                } catch (error) {
                    alert('Error deleting teacher: ' + error.message);
                }
            }
        }
    </script>
</body>
</html>
