<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Historical Attendance - <%= classInfo.class_name %></title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f5f5;
            min-height: 100vh;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px 0;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .nav-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .nav-left h1 {
            font-size: 24px;
        }
        
        .nav-left p {
            opacity: 0.8;
            margin-top: 5px;
        }
        
        .nav-right a {
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            border: 1px solid rgba(255,255,255,0.3);
            border-radius: 5px;
            margin-left: 10px;
            transition: all 0.3s;
        }
        
        .nav-right a:hover {
            background: rgba(255,255,255,0.2);
        }
        
        .container {
            max-width: 1400px;
            margin: 30px auto;
            padding: 0 20px;
        }
        
        .controls {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
        }
        
        .view-controls {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .view-toggle {
            display: flex;
            background: #f0f0f0;
            border-radius: 8px;
            overflow: hidden;
        }
        
        .view-toggle a {
            padding: 10px 20px;
            text-decoration: none;
            color: #666;
            transition: all 0.3s;
        }
        
        .view-toggle a.active {
            background: #667eea;
            color: white;
        }
        
        .nav-controls {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .nav-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }
        
        .nav-btn:hover {
            background: #5a67d8;
        }
        
        .current-range {
            font-weight: bold;
            color: #333;
        }
        
        .attendance-grid {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .grid-header {
            background: #f8f9fa;
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
        }
        
        .grid-header h2 {
            margin-bottom: 10px;
            color: #333;
        }
        
        .grid-header p {
            color: #666;
        }
        
        .attendance-table {
            width: 100%;
            border-collapse: collapse;
            overflow-x: auto;
        }
        
        .table-container {
            overflow-x: auto;
            max-height: 70vh;
        }
        
        .attendance-table th,
        .attendance-table td {
            text-align: center;
            padding: 12px 8px;
            border: 1px solid #e9ecef;
            min-width: 60px;
        }
        
        .attendance-table th {
            background: #f8f9fa;
            font-weight: 600;
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        .student-info {
            background: #f8f9fa !important;
            text-align: left !important;
            min-width: 150px !important;
            position: sticky;
            left: 0;
            z-index: 5;
        }
        
        .student-info.header {
            z-index: 15;
        }
        
        .date-header {
            writing-mode: vertical-rl;
            text-orientation: mixed;
            min-width: 50px;
        }
        
        .period-specific {
            min-width: 60px;
            background: linear-gradient(135deg, #ff6b6b, #ee5a52);
            color: white;
            border: 2px solid #ff4757;
            position: relative;
        }
        
        .period-specific::before {
            content: "📚";
            position: absolute;
            top: -8px;
            left: 50%;
            transform: translateX(-50%);
            background: #ff4757;
            border-radius: 50%;
            width: 16px;
            height: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        
        .period-name {
            font-size: 10px;
            font-weight: bold;
            margin-top: 2px;
        }
        
        .subject-name {
            font-size: 8px;
            font-style: italic;
            margin-top: 1px;
            opacity: 0.9;
        }
        

        
        .attendance-cell {
            position: relative;
        }
        
        .attendance-select {
            border: none;
            background: transparent;
            width: 100%;
            padding: 5px;
            text-align: center;
            cursor: pointer;
            font-weight: bold;
        }
        
        .attendance-display {
            text-align: center;
            padding: 5px;
        }
        
        .attendance-edit {
            display: none;
            margin-top: 5px;
        }
        
        .attendance-cell:hover .attendance-edit {
            display: block;
        }
        
        .attendance-select {
            width: 100%;
            padding: 3px;
            border: 1px solid #ccc;
            border-radius: 3px;
            font-size: 11px;
            background: white;
            cursor: pointer;
        }
        
        .attendance-select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 3px rgba(102, 126, 234, 0.3);
        }
        
        .status-text {
            font-size: 14px;
            font-weight: bold;
            line-height: 1.2;
            text-align: center;
            display: block;
            padding: 4px;
            border-radius: 3px;
            min-width: 20px;
        }
        
        .status-text.present {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .status-text.absent {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .no-record {
            color: #6c757d;
            font-style: italic;
        }
        
        .attendance-select option[value="P"] {
            background: #d4edda;
            color: #155724;
        }
        
        .attendance-select option[value="A"] {
            background: #f8d7da;
            color: #721c24;
        }
        
        .present {
            background: #d4edda !important;
            color: #155724 !important;
        }
        
        .absent {
            background: #f8d7da !important;
            color: #721c24 !important;
        }
        
        .no-record {
            background: #fff3cd !important;
            color: #856404 !important;
        }
        
        .weekend {
            background: #e2e3e5 !important;
            color: #6c757d !important;
        }
        
        .festival {
            background: #fff3cd !important;
            color: #856404 !important;
            position: relative;
        }
        
        .festival::after {
            content: "🎉";
            position: absolute;
            top: 2px;
            right: 2px;
            font-size: 12px;
        }
        
        .bookmark-section {
            display: flex;
            align-items: center;
            gap: 5px;
            margin-top: 5px;
            font-size: 12px;
        }
        
        .bookmark-checkbox {
            width: 16px;
            height: 16px;
            cursor: pointer;
        }
        
        .bookmark-input {
            width: 100px;
            font-size: 10px;
            padding: 2px;
            border: 1px solid #ccc;
            border-radius: 3px;
        }
        
        .actions {
            padding: 20px;
            text-align: center;
            background: #f8f9fa;
            border-top: 1px solid #e9ecef;
        }
        
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            margin: 0 5px;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
        }
        
        .btn-secondary {
            background: #6c757d;
            color: white;
        }
        
        .btn-secondary:hover {
            background: #5a6268;
        }
        
        .success-message, .error-message {
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
            display: none;
        }
        
        .success-message {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .error-message {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }
        
        .loading div {
            display: inline-block;
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .stats {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .stat-card {
            background: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            text-align: center;
            flex: 1;
        }
        
        .stat-number {
            font-size: 24px;
            font-weight: bold;
            color: #667eea;
        }
        
        .stat-label {
            color: #666;
            font-size: 14px;
            margin-top: 5px;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="nav-container">
            <div class="nav-left">
                <h1>Historical Attendance</h1>
                <p><%= classInfo.class_name %> - <%= user.name %></p>
            </div>
            <div class="nav-right">
                <a href="/teacher/dashboard">🏠 Dashboard</a>
                <a href="/teacher/class/<%= classInfo.id %>/attendance">📝 Today's Attendance</a>
                <a href="/logout">Logout</a>
            </div>
        </div>
    </div>
    
    <div class="container">
        <div class="controls">
            <div class="view-controls">
                <div class="view-toggle">
                    <a href="?view=week&date=<%= currentDate %>" class="<%= view === 'week' ? 'active' : '' %>">Week View</a>
                    <a href="?view=month&date=<%= currentDate %>" class="<%= view === 'month' ? 'active' : '' %>">Month View</a>
                </div>
            </div>
            
            <div class="nav-controls">
                <a href="?view=<%= view %>&date=<%= prevDate %>" class="nav-btn">← Previous</a>
                <span class="current-range">
                    <% if (view === 'week') { %>
                        Week of <%= new Date(startDate).toLocaleDateString() %>
                    <% } else { %>
                        <%= new Date(currentDate).toLocaleDateString('en-US', { month: 'long', year: 'numeric' }) %>
                    <% } %>
                </span>
                <a href="?view=<%= view %>&date=<%= nextDate %>" class="nav-btn">Next →</a>
            </div>
        </div>
        

        
        <div class="stats">
            <div class="stat-card">
                <div class="stat-number"><%= students.length %></div>
                <div class="stat-label">Total Students</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><%= dates.length %></div>
                <div class="stat-label"><%= view === 'week' ? 'Days in Week' : 'Days in Month' %></div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="totalRecords">-</div>
                <div class="stat-label">Attendance Records</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="presentPercentage">-</div>
                <div class="stat-label">Present %</div>
            </div>
        </div>
        
        <div class="success-message" id="successMessage"></div>
        <div class="error-message" id="errorMessage"></div>
        <div class="loading" id="loadingSpinner"><div></div></div>
        
        <div class="attendance-grid">
            <div class="grid-header">
                <h2><%= view === 'week' ? 'Weekly' : 'Monthly' %> Attendance Sheet</h2>
                <p><%= classInfo.class_name %> - <%= startDate %> to <%= endDate %></p>
                <div class="attendance-legend" style="margin-top: 10px; display: flex; gap: 20px; font-size: 12px;">
                    <div style="display: flex; align-items: center; gap: 5px;">
                        <span class="status-text present" style="font-size: 12px; padding: 2px 6px;">P</span>
                        <span>Present</span>
                    </div>
                    <div style="display: flex; align-items: center; gap: 5px;">
                        <span class="status-text absent" style="font-size: 12px; padding: 2px 6px;">A</span>
                        <span>Absent</span>
                    </div>
                    <div style="display: flex; align-items: center; gap: 5px;">
                        <span class="no-record" style="font-size: 12px; padding: 2px 6px;">-</span>
                        <span>No Record</span>
                    </div>
                </div>
            </div>
            
            <div class="table-container">
                <table class="attendance-table" id="attendanceTable">
                    <thead>
                        <tr>
                            <th class="student-info header">Student (Roll No.)</th>
                            <% dates.forEach(dateInfo => { %>
                                <% const isWeekend = new Date(dateInfo.date).getDay() === 0; %>
                                <% const dayOfWeek = new Date(dateInfo.date).getDay(); %>
                                <% const adjustedDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek; %>
                                <% const teacherPeriodsOnThisDay = teacherPeriodsOnSameDays.filter(period => period.day_of_week === adjustedDayOfWeek); %>
                                
                                <% if (teacherPeriodsOnThisDay.length > 1) { %>
                                    <!-- Multiple periods on this day - show separate columns -->
                                    <% teacherPeriodsOnThisDay.forEach(period => { %>
                                        <th class="date-header period-specific <%= isWeekend ? 'weekend' : '' %>"
                                            data-date="<%= dateInfo.date %>"
                                            data-period-id="<%= period.id %>">
                                            <div><%= dateInfo.day %></div>
                                            <div><%= dateInfo.dayNum %></div>
                                            <div class="period-name"><%= period.subject_name %> (P<%= period.period_number %>)</div>
                                            <div class="subject-name"><%= period.subject_code %></div>
                                            <% if (!isWeekend) { %>
                                                <div class="bookmark-section">
                                                    <input type="checkbox" class="bookmark-checkbox"
                                                           onchange="toggleBookmark('<%= dateInfo.date %>')"
                                                           data-date="<%= dateInfo.date %>">
                                                    <span>📖</span>
                                                </div>
                                            <% } %>
                                        </th>
                                    <% }); %>
                                <% } else { %>
                                    <!-- Single period or no period on this day -->
                                    <th class="date-header <%= isWeekend ? 'weekend' : '' %>" data-date="<%= dateInfo.date %>">
                                        <div><%= dateInfo.day %></div>
                                        <div><%= dateInfo.dayNum %></div>
                                        <% if (teacherPeriodsOnThisDay.length === 1) { %>
                                            <div class="period-name"><%= teacherPeriodsOnThisDay[0].subject_name %></div>
                                            <div class="subject-name"><%= teacherPeriodsOnThisDay[0].subject_code %></div>
                                        <% } %>
                                        <% if (!isWeekend) { %>
                                            <div class="bookmark-section">
                                                <input type="checkbox" class="bookmark-checkbox" 
                                                       onchange="toggleBookmark('<%= dateInfo.date %>')" 
                                                       data-date="<%= dateInfo.date %>">
                                                <span>📖</span>
                                            </div>
                                        <% } %>
                                    </th>
                                <% } %>
                            <% }); %>
                        </tr>

                    </thead>
                    <tbody>
                        <% students.forEach(student => { %>
                            <tr data-student-id="<%= student.id %>">
                                <td class="student-info">
                                    <strong><%= student.student_name %></strong><br>
                                    <small>Roll No: <%= student.roll_no %></small>
                                </td>
                                <% dates.forEach(dateInfo => { %>
                                    <% 
                                        const isWeekend = new Date(dateInfo.date).getDay() === 0;
                                        const dayOfWeek = new Date(dateInfo.date).getDay();
                                        const adjustedDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
                                        const teacherPeriodsOnThisDay = teacherPeriodsOnSameDays.filter(period => period.day_of_week === adjustedDayOfWeek);
                                    %>
                                    
                                    <% if (teacherPeriodsOnThisDay.length > 1) { %>
                                        <!-- Multiple periods on this day - show separate cells -->
                                        <% teacherPeriodsOnThisDay.forEach(period => { %>
                                            <% 
                                                const status = attendanceGrid[student.id] && 
                                                              attendanceGrid[student.id][dateInfo.date] && 
                                                              attendanceGrid[student.id][dateInfo.date][period.id];
                                                let cellClass = '';
                                                if (isWeekend) cellClass = 'weekend';
                                                else if (status && status.includes('P')) cellClass = 'present';
                                                else if (status && status.includes('A')) cellClass = 'absent';
                                                else cellClass = 'no-record';
                                            %>
                                            <td class="attendance-cell <%= cellClass %>"
                                                data-date="<%= dateInfo.date %>"
                                                data-student-id="<%= student.id %>"
                                                data-period-id="<%= period.id %>">
                                                <% if (isWeekend) { %>
                                                    <span>-</span>
                                                <% } else { %>
                                                    <div class="attendance-display">
                                                        <% if (status) { %>
                                                            <span class="status-text <%= status === 'P' ? 'present' : 'absent' %>"><%= status %></span>
                                                        <% } else { %>
                                                            <span class="no-record">-</span>
                                                        <% } %>
                                                    </div>
                                                    <div class="attendance-edit">
                                                        <select class="attendance-select"
                                                                data-student-id="<%= student.id %>"
                                                                data-date="<%= dateInfo.date %>"
                                                                data-period-id="<%= period.id %>"
                                                                onchange="updateAttendanceStatus(this)">
                                                            <option value="">-</option>
                                                            <option value="P" <%= status && status.includes('P') ? 'selected' : '' %>>P</option>
                                                            <option value="A" <%= status && status.includes('A') ? 'selected' : '' %>>A</option>
                                                        </select>
                                                    </div>
                                                <% } %>
                                            </td>
                                        <% }); %>
                                    <% } else { %>
                                        <!-- Single period or no period on this day -->
                                        <% 
                                            const status = attendanceGrid[student.id] && 
                                                          attendanceGrid[student.id][dateInfo.date] && 
                                                          (attendanceGrid[student.id][dateInfo.date]['general'] || 
                                                           (teacherPeriodsOnThisDay.length === 1 && 
                                                            attendanceGrid[student.id][dateInfo.date][teacherPeriodsOnThisDay[0].id]));
                                            let cellClass = '';
                                            if (isWeekend) cellClass = 'weekend';
                                            else if (status && status.includes('P')) cellClass = 'present';
                                            else if (status && status.includes('A')) cellClass = 'absent';
                                            else cellClass = 'no-record';
                                        %>
                                        <td class="attendance-cell <%= cellClass %>" data-date="<%= dateInfo.date %>" data-student-id="<%= student.id %>">
                                            <% if (isWeekend) { %>
                                                <span>-</span>
                                            <% } else { %>
                                                <div class="attendance-display">
                                                    <% if (status) { %>
                                                        <span class="status-text <%= status === 'P' ? 'present' : 'absent' %>"><%= status %></span>
                                                    <% } else { %>
                                                        <span class="no-record">-</span>
                                                    <% } %>
                                                </div>
                                                <div class="attendance-edit">
                                                    <select class="attendance-select" 
                                                            data-student-id="<%= student.id %>" 
                                                            data-date="<%= dateInfo.date %>"
                                                            onchange="updateAttendanceStatus(this)">
                                                        <option value="">-</option>
                                                        <option value="P" <%= status && status.includes('P') ? 'selected' : '' %>>P</option>
                                                        <option value="A" <%= status && status.includes('A') ? 'selected' : '' %>>A</option>
                                                    </select>
                                                </div>
                                            <% } %>
                                        </td>
                                    <% } %>
                                <% }); %>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
            
            <div class="actions">
                <button class="btn btn-primary" onclick="saveAllChanges()">💾 Save All Changes</button>
                <button class="btn btn-secondary" onclick="location.reload()">🔄 Reset</button>
            </div>
        </div>
    </div>
    
    <script>
        // Safe fetch helper that ensures JSON and sends session cookies
        async function fetchJson(url, options = {}) {
            const response = await fetch(url, { credentials: 'same-origin', ...options });
            if (response.status === 401) {
                alert('Your session has expired. Redirecting to login...');
                window.location.href = '/login';
                throw new Error('Unauthorized');
            }
            const contentType = response.headers.get('content-type') || '';
            if (!contentType.includes('application/json')) {
                const text = await response.text();
                throw new Error(`Non-JSON response (${response.status}). Possibly redirected to login. First bytes: ${text.slice(0, 80)}`);
            }
            return response.json();
        }
        let changedRecords = new Map(); // Track changes before saving
        let bookmarks = new Map(); // Store bookmark data
        
        // Function to update attendance status
        function updateAttendanceStatus(selectElement) {
            const studentId = selectElement.getAttribute('data-student-id');
            const date = selectElement.getAttribute('data-date');
            const periodId = selectElement.getAttribute('data-period-id');
            const status = selectElement.value;
            
            const key = periodId ? `${studentId}-${date}-${periodId}` : `${studentId}-${date}`;
            changedRecords.set(key, {
                studentId: studentId,
                date: date,
                periodId: periodId,
                status: status
            });
            
            // Update the display immediately
            const cell = selectElement.closest('.attendance-cell');
            const displayDiv = cell.querySelector('.attendance-display');
            const statusText = displayDiv.querySelector('.status-text') || displayDiv.querySelector('.no-record');
            
            if (status === 'P') {
                statusText.textContent = 'P';
                statusText.className = 'status-text present';
                cell.className = 'attendance-cell present';
            } else if (status === 'A') {
                statusText.textContent = 'A';
                statusText.className = 'status-text absent';
                cell.className = 'attendance-cell absent';
            } else {
                statusText.textContent = '-';
                statusText.className = 'no-record';
                cell.className = 'attendance-cell no-record';
            }
            
            console.log(`Attendance updated: Student ${studentId}, Date ${date}, Status ${status}`);
        }
        
        // Function to save all attendance changes
        async function saveAllChanges() {
            if (changedRecords.size === 0) {
                alert('No changes to save!');
                return;
            }
            
            const changes = Array.from(changedRecords.values());
            console.log('Saving changes:', changes);
            
            try {
                const result = await fetchJson('/api/attendance/bulk-update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        classId: <%- classInfo.id %>,
                        changes: changes
                    })
                });
                if (result.success) {
                    alert(`Successfully updated ${result.updatedCount} attendance records!`);
                    changedRecords.clear();
                    location.reload(); // Refresh to show updated data
                } else {
                    alert('Error updating attendance: ' + result.error);
                }
            } catch (error) {
                console.error('Error saving attendance:', error);
                alert('Error saving attendance: ' + error.message);
            }
        }
        
        // Load existing bookmarks on page load
        function loadBookmarks() {
            try {
                // Use server-side bookmarks data
                const serverBookmarks = <%- JSON.stringify(bookmarks || []) %>;
                
                if (serverBookmarks && serverBookmarks.length > 0) {
                    serverBookmarks.forEach(bookmark => {
                        try {
                            const bookmarkData = {
                                id: bookmark.id,
                                date: bookmark.date,
                                title: bookmark.title || '',
                                description: bookmark.description || ''
                            };
                            
                            bookmarks.set(bookmarkData.date, bookmarkData);
                            
                            const checkbox = document.querySelector(`input[data-date="${bookmarkData.date}"]`);
                            if (checkbox) {
                                checkbox.checked = true;
                            }
                            
                            // Mark date headers as festivals
                            const dateHeader = document.querySelector(`th[data-date="${bookmarkData.date}"]`);
                            if (dateHeader) {
                                dateHeader.classList.add('festival');
                                dateHeader.title = bookmarkData.title;
                            }
                            
                            // Mark all cells in that column as festivals
                            const cells = document.querySelectorAll(`td[data-date="${bookmarkData.date}"]`);
                            cells.forEach(cell => {
                                cell.classList.add('festival');
                            });
                        } catch (bookmarkError) {
                            console.error('Error processing bookmark:', bookmarkError);
                        }
                    });
                }
            } catch (error) {
                console.error('Error loading bookmarks:', error);
            }
        }
        
        async function toggleBookmark(date) {
            const checkbox = document.querySelector(`input[data-date="${date}"]`);
            const isChecked = checkbox.checked;
            
            if (isChecked) {
                // Prompt for festival name
                const title = prompt('Enter festival/holiday name:', '');
                if (title === null) {
                    checkbox.checked = false;
                    return;
                }
                
                const description = prompt('Enter description (optional):', '');
                
                try {
                    const response = await fetch('/api/bookmarks', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            date: date,
                            title: title,
                            description: description || '',
                            classId: <%- classInfo.id %>
                        })
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        bookmarks.set(date, result.bookmark);
                        // Mark date as festival
                        const dateHeader = document.querySelector(`th[data-date="${date}"]`);
                        if (dateHeader) {
                            dateHeader.classList.add('festival');
                            dateHeader.title = title;
                        }
                        // Mark all cells in that column as festivals
                        const cells = document.querySelectorAll(`td[data-date="${date}"]`);
                        cells.forEach(cell => {
                            cell.classList.add('festival');
                        });
                    } else {
                        checkbox.checked = false;
                        alert('Error marking festival: ' + result.error);
                    }
                } catch (error) {
                    checkbox.checked = false;
                    alert('Error marking festival: ' + error.message);
                }
            } else {
                // Remove bookmark
                const bookmark = bookmarks.get(date);
                if (bookmark) {
                    try {
                        const response = await fetch(`/api/bookmarks/${bookmark.id}`, {
                            method: 'DELETE'
                        });
                        
                        const result = await response.json();
                        if (result.success) {
                            bookmarks.delete(date);
                            // Remove festival styling
                            const dateHeader = document.querySelector(`th[data-date="${date}"]`);
                            if (dateHeader) {
                                dateHeader.classList.remove('festival');
                                dateHeader.removeAttribute('title');
                            }
                            // Remove festival styling from all cells in that column
                            const cells = document.querySelectorAll(`td[data-date="${date}"]`);
                            cells.forEach(cell => {
                                cell.classList.remove('festival');
                            });
                        } else {
                            checkbox.checked = true;
                            alert('Error removing festival: ' + result.error);
                        }
                    } catch (error) {
                        checkbox.checked = true;
                        alert('Error removing festival: ' + error.message);
                    }
                }
            }
        }
        
        function updateAttendanceStatus(selectElement) {
            const studentId = selectElement.dataset.studentId;
            const date = selectElement.dataset.date;
            const status = selectElement.value;
            const cell = selectElement.parentElement;
            
            // Update visual styling
            cell.className = 'attendance-cell';
            if (status === 'P') {
                cell.classList.add('present');
            } else if (status === 'A') {
                cell.classList.add('absent');
            } else {
                cell.classList.add('no-record');
            }
            
            // Track the change
            const key = `${studentId}-${date}`;
            changedRecords.set(key, { student_id: studentId, date: date, status: status });
            
            // Update stats
            updateStats();
            
            console.log(`Updated attendance: Student ${studentId}, Date ${date}, Status ${status}`);
        }
        
        function updateStats() {
            const table = document.getElementById('attendanceTable');
            const selects = table.querySelectorAll('.attendance-select');
            let totalRecords = 0;
            let presentCount = 0;
            
            selects.forEach(select => {
                if (select.value !== '') {
                    totalRecords++;
                    if (select.value === 'P') {
                        presentCount++;
                    }
                }
            });
            
            document.getElementById('totalRecords').textContent = totalRecords;
            document.getElementById('presentPercentage').textContent = 
                totalRecords > 0 ? Math.round((presentCount / totalRecords) * 100) + '%' : '0%';
        }
        

        
        function showMessage(message, type) {
            hideMessages();
            const messageElement = document.getElementById(type === 'success' ? 'successMessage' : 'errorMessage');
            messageElement.textContent = message;
            messageElement.style.display = 'block';
            
            // Auto hide after 5 seconds
            setTimeout(() => {
                messageElement.style.display = 'none';
            }, 5000);
        }
        
        function hideMessages() {
            document.getElementById('successMessage').style.display = 'none';
            document.getElementById('errorMessage').style.display = 'none';
        }
        
        function showLoading(show) {
            document.getElementById('loadingSpinner').style.display = show ? 'block' : 'none';
        }
        
        // Initialize stats on page load
        document.addEventListener('DOMContentLoaded', function() {
            updateStats();
            loadBookmarks(); // Load existing bookmarks
            
            // Add keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                if (e.ctrlKey && e.key === 's') {
                    e.preventDefault();
                    saveAllChanges();
                }
            });
            
            // Apply festival styling to cells that are marked as festivals but aren't currently styled
            // This ensures festivals are shown even if the cell has attendance data
            const festivalColumns = document.querySelectorAll('th.festival');
            festivalColumns.forEach(header => {
                const date = header.dataset.date;
                const cells = document.querySelectorAll(`td[data-date="${date}"]`);
                cells.forEach(cell => {
                    if (!cell.classList.contains('weekend')) {
                        cell.classList.add('festival');
                    }
                });
            });
        });
        
        // Warn about unsaved changes
        window.addEventListener('beforeunload', function(e) {
            if (changedRecords.size > 0) {
                const message = 'You have unsaved changes. Are you sure you want to leave?';
                e.returnValue = message;
                return message;
            }
        });
    </script>
</body>
</html>
